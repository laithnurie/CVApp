apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.4"
}
android.testOptions {
    unitTests.all {
        jacoco {
            includeNoLocationClasses = true
        }
    }
}
project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }

    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*Application.class',
            '**/*App.class',
            '**/*Activity.class',
            '**/*Activity$*.class',
            '**/*Activity*Companion.class',
            '**/*Fragment.class',
            '**/*Fragment*Companion.class',
            '**/*Adapter.class',
            '**/*Adapter*$*.class',
            '**/*UIModel*.class',
            '**/KotlinSetup*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/AutoValue_*',
            '**/*Module.class',
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class',
            '**/Dagger*Component$Builder.class',
            '**/*Module_*Factory.class',
            '**/*View.class',
            '**/*View$*.class',
            '**/*_*',
    ]
    // When no product flavors defined, use empty
    if (!productFlavors)
        productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            def coverageSourceDirs = [
                    "src/main/java",
                    "src/$productFlavorName/java",
                    "src/$buildTypeName/java",
                    "src/$productFlavorName/kotlin",
                    "src/$buildTypeName/kotlin"
            ]
            def classDirs = fileTree(
                    dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                    excludes: excludes
            ) + fileTree(
                    dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}",
                    excludes: excludes
            )
            def sourceDirs = files(coverageSourceDirs)
            def execData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
                classDirectories.setFrom(classDirs)
                additionalSourceDirs.setFrom(sourceDirs)
                sourceDirectories.setFrom(sourceDirs)
                executionData.setFrom(execData)
                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
            task "${testTaskName}CoverageVerification" (type: JacocoCoverageVerification, dependsOn: "${testTaskName}Coverage") {
                sourceDirectories.setFrom(sourceDirs)
                classDirectories.setFrom(classDirs)
                executionData.setFrom(execData)
                violationRules {
                    setFailOnViolation(true)
                    rule {
                        limit {
                            minimum = 0.18
                        }
                    }
                }
            }
        }
    }
}